{%- macro get_play_by_play_data(season) -%}

{%- set bool_cols = [
        "shotgun",
        "no_huddle",
        "qb_dropback",
        "qb_kneel",
        "qb_spike",
        "qb_scramble",
        "punt_blocked",
        "first_down_rush",
        "first_down_pass",
        "first_down_penalty",
        "third_down_converted",
        "third_down_failed",
        "fourth_down_converted",
        "fourth_down_failed",
        "incomplete_pass",
        "touchback",
        "interception",
        "punt_inside_twenty",
        "punt_in_endzone",
        "punt_out_of_bounds",
        "punt_downed",
        "punt_fair_catch",
        "kickoff_inside_twenty",
        "kickoff_in_endzone",
        "kickoff_out_of_bounds",
        "kickoff_downed",
        "kickoff_fair_catch",
        "fumble_forced",
        "fumble_not_forced",
        "fumble_out_of_bounds",
        "solo_tackle",
        "safety",
        "penalty",
        "replay_or_challenge",
        "tackled_for_loss",
        "fumble_lost",
        "own_kickoff_recovery",
        "own_kickoff_recovery_td",
        "qb_hit",
        "rush_attempt",
        "pass_attempt",
        "sack",
        "touchdown",
        "pass_touchdown",
        "rush_touchdown",
        "return_touchdown",
        "extra_point_attempt",
        "two_point_attempt",
        "field_goal_attempt",
        "kickoff_attempt",
        "punt_attempt",
        "fumble",
        "complete_pass",
        "assist_tackle",
        "lateral_reception",
        "lateral_rush",
        "lateral_return",
        "lateral_recovery",
        "defensive_two_point_attempt",
        "defensive_two_point_conv",
        "defensive_extra_point_attempt",
        "defensive_extra_point_conv"
        ]
-%}
{%- set player_cols = [
        "passer_player_id",
        "passer_player_name",
        "receiver_player_id",
        "receiver_player_name",
        "rusher_player_id",
        "rusher_player_name",
        "lateral_receiver_player_id",
        "lateral_receiver_player_name",
        "lateral_rusher_player_id",
        "lateral_rusher_player_name",
        "lateral_sack_player_id",
        "lateral_sack_player_name",
        "interception_player_id",
        "interception_player_name",
        "lateral_interception_player_id",
        "lateral_interception_player_name",
        "punt_returner_player_id",
        "punt_returner_player_name",
        "lateral_punt_returner_player_id",
        "lateral_punt_returner_player_name",
        "kickoff_returner_player_name",
        "kickoff_returner_player_id",
        "lateral_kickoff_returner_player_id",
        "lateral_kickoff_returner_player_name",
        "punter_player_id",
        "punter_player_name",
        "kicker_player_name",
        "kicker_player_id",
        "own_kickoff_recovery_player_id",
        "own_kickoff_recovery_player_name",
        "blocked_player_id",
        "blocked_player_name",
        "tackle_for_loss_1_player_id",
        "tackle_for_loss_1_player_name",
        "tackle_for_loss_2_player_id",
        "tackle_for_loss_2_player_name",
        "qb_hit_1_player_id",
        "qb_hit_1_player_name",
        "qb_hit_2_player_id",
        "qb_hit_2_player_name",
        "forced_fumble_player_1_team",
        "forced_fumble_player_1_player_id",
        "forced_fumble_player_1_player_name",
        "forced_fumble_player_2_team",
        "forced_fumble_player_2_player_id",
        "forced_fumble_player_2_player_name",
        "solo_tackle_1_team",
        "solo_tackle_2_team",
        "solo_tackle_1_player_id",
        "solo_tackle_2_player_id",
        "solo_tackle_1_player_name",
        "solo_tackle_2_player_name",
        "assist_tackle_1_player_id",
        "assist_tackle_1_player_name",
        "assist_tackle_1_team",
        "assist_tackle_2_player_id",
        "assist_tackle_2_player_name",
        "assist_tackle_2_team",
        "assist_tackle_3_player_id",
        "assist_tackle_3_player_name",
        "assist_tackle_3_team",
        "assist_tackle_4_player_id",
        "assist_tackle_4_player_name",
        "assist_tackle_4_team",
        "pass_defense_1_player_id",
        "pass_defense_1_player_name",
        "pass_defense_2_player_id",
        "pass_defense_2_player_name",
        "fumbled_1_team",
        "fumbled_1_player_id",
        "fumbled_1_player_name",
        "fumbled_2_player_id",
        "fumbled_2_player_name",
        "fumbled_2_team",
        "fumble_recovery_1_team",
        "fumble_recovery_1_yards",
        "fumble_recovery_1_player_id",
        "fumble_recovery_1_player_name",
        "fumble_recovery_2_team",
        "fumble_recovery_2_player_id",
        "fumble_recovery_2_player_name",
        "penalty_team",
        "penalty_yards",
        "penalty_player_id",
        "penalty_player_name",
        "return_team",
        "return_yards"
]
-%}

{%- set typed_cols %}
        cast(cast(game_date as {{ dbt.type_timestamp() }}) as date) as game_date,
        {# cast(time as {{ dbt.type_timestamp() }}) as  #}
        {{ to_int("play_id") }} as play_id,
        game_id as game_id,
        {{ to_int("split(game_id, '_')[1]") }} as week_nbr,
        {{ fix_team_names("home_team") }} as home_team_code,
        {{ fix_team_names("away_team") }} as away_team_code,
        {{ fix_team_names("posteam") }} as off_team_code,
        posteam_type as off_team_type,
        case when posteam_type = {{ dbt.string_literal("home") }} then true else false end as is_home_team,
        {{ fix_team_names("defteam") }} as def_team_code,
        side_of_field,
        game_half,
        {{ to_int("yardline_100") }} as yardline_100,
        time as time_remaining,
        {{ to_int("quarter_seconds_remaining") }} as quarter_seconds_remaining,
        {{ to_int("half_seconds_remaining") }} as half_seconds_remaining,
        {{ to_int("game_seconds_remaining") }} as game_seconds_remaining,
        {{ numeric_to_bool("quarter_end") }} as is_quarter_end,
        {{ to_int("qtr") }} as quarter,
        {{ to_int("drive") }} as drive,
        {{ to_int("down") }} as down,
        play_type,
        {{ numeric_to_bool("sp") }} as is_special_point,
        {{ numeric_to_bool("goal_to_go") }} as is_within_goal_line,
        yrdln as yardline_desc,
        {{ to_int("ydstogo") }} as yards_to_go,
        {{ to_int("ydsnet") }} as net_yards,
        {{ to_int("yards_gained") }} as yards_gained,
        "desc" as play_description,
        case when {{ to_int("down") }}  = 4 and play_type in ({{ dbt.string_literal("run") }}, {{ dbt.string_literal("pass") }}) then true else false end as is_fourth_down_attempt,
        case when pass_length not in ({{ dbt.string_literal("short") }}, {{ dbt.string_literal("deep")}}) then {{ to_int("pass_length") }} end as pass_length,
        case when pass_length in ({{ dbt.string_literal("short") }}, {{ dbt.string_literal("deep")}}) then pass_length end as pass_length_description,
        pass_location,
        {{ to_int("air_yards") }} as air_yards,
        {{ to_int("yards_after_catch") }} as yards_after_catch,
        run_location,
        run_gap,
        field_goal_result,
        case when field_goal_result = {{ dbt.string_literal("made") }} then true else false end as is_field_goal_success,
        {{ to_int("kick_distance") }} as kick_distance,
        extra_point_result,
        two_point_conv_result,
        home_timeouts_remaining,
        away_timeouts_remaining,
        {{ to_int("timeout") }} as timeout_number,
        timeout_team as timeout_team_code,
        td_team as td_team_code,
        {{ to_int("posteam_timeouts_remaining") }} as off_team_timeouts_remaining,
        {{ to_int("defteam_timeouts_remaining") }} as def_team_timeouts_remaining,
        {{ to_int("total_home_score") }} as total_home_score,
        {{ to_int("total_away_score") }} as total_away_score,
        {{ to_int("posteam_score") }} as off_team_score,
        {{ to_int("defteam_score") }} as def_team_score,
        {{ to_int("score_differential") }} as score_differential,
        {{ to_int("posteam_score_post") }} as off_team_score_post,
        {{ to_int("defteam_score_post") }} as def_team_score_post,
        {{ to_int("score_differential_post") }} as score_differential_post,

        replay_or_challenge_result,
        penalty_type,

        {%- for col in bool_cols %}
        {{ numeric_to_bool(col) }} as is_{{ col }}{% if not loop.last %},{% endif %}
        {%- endfor %},

        {%- for col in player_cols %}
            {% if col.endswith("_yards") -%}
                {{ to_int(col) }} as {{ col }}
            {%- else %}
                {{ to_string(col) }} as {{ col }}
            {%- endif -%}
            {%- if not loop.last %},{% endif -%}
        {%- endfor %}

{%- endset -%}

select
    {{ to_int(season) }} as season_nbr,
    season_type as season_type_code,
    {{ typed_cols }}
from
    {{ source("raw_pbp", "play_by_play_" ~ season) }}

{%- endmacro -%}
